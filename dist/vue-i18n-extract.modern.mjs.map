{"version":3,"file":"vue-i18n-extract.modern.mjs","sources":["../src/config-file/vue-i18n-extract.config.ts","../src/config-file/index.ts","../src/create-report/vue-files.ts","../src/create-report/language-files.ts","../src/create-report/report.ts","../src/create-report/index.ts","../src/index.ts"],"sourcesContent":["export default {\n  // Options documented in vue-i18n-extract readme.\n  vueFiles: './src/**/*.?(js|vue)',\n  languageFiles: './lang/**/*.?(json|yaml|yml|js)',\n  exclude: [],\n  output: false,\n  add: false,\n  remove: false,\n  ci: false,\n  separator: '.',\n  noEmptyTranslation: '',\n  missingTranslationString: '',\n};\n","import cac from 'cac';\nimport fs from 'fs';\nimport path from 'path';\nimport defaultConfig from './vue-i18n-extract.config';\n\nexport function initCommand(): void {\n  fs.writeFileSync(\n    path.resolve(process.cwd(), './vue-i18n-extract.config.js'),\n    `module.exports = ${JSON.stringify(defaultConfig, null, 2)}`,\n  );\n}\n\nexport function resolveConfig (): Record<string, string>  {\n  const argvOptions = cac().parse(process.argv, { run: false }).options;\n\n  let options;\n\n  try {\n    const pathToConfigFile = path.resolve(process.cwd(), './vue-i18n-extract.config.js');\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const configOptions = require(pathToConfigFile);\n\n    console.info(`\\nUsing config file found at ${pathToConfigFile}`);\n\n    options = {\n      ...configOptions,\n      ...argvOptions\n    };\n  } catch {\n    options = argvOptions;\n  }\n\n  options.exclude = Array.isArray(options.exclude) ? options.exclude : [options.exclude];\n\n  return options;\n}\n","import { SimpleFile, I18NItemWithBounding } from '../types';\nimport isValidGlob from 'is-valid-glob';\nimport glob from 'glob';\nimport fs from 'fs';\n\nexport function readVueFiles (src: string): SimpleFile[] {\n  // Replace backslash path segments to make the path work with the glob package.\n  // https://github.com/Spittal/vue-i18n-extract/issues/159\n  const normalizedSrc = src.replace(/\\\\/g, '/');\n  if (!isValidGlob(normalizedSrc)) {\n    throw new Error(`vueFiles isn't a valid glob pattern.`);\n  }\n\n  const targetFiles = glob.sync(normalizedSrc);\n\n  if (targetFiles.length === 0) {\n    throw new Error('vueFiles glob has no files.');\n  }\n\n  return targetFiles.map((f) => {\n    const fileName = f.replace(process.cwd(), '.');\n    return { fileName, path: f, content: fs.readFileSync(f, 'utf8') };\n  });\n}\n\nfunction* getMatches (file: SimpleFile, regExp: RegExp, captureGroup = 1): IterableIterator<I18NItemWithBounding> {\n  while (true) {\n    const match = regExp.exec(file.content);\n    if (match === null) {\n      break;\n    }\n    const path = match[captureGroup];\n\n    const pathAtIndex = file.content.indexOf(path);\n    const previousCharacter = file.content.charAt(pathAtIndex - 1);\n    const nextCharacter = file.content.charAt(pathAtIndex + path.length);\n\n    const line = (file.content.substring(0, match.index).match(/\\n/g) || []).length + 1;\n    yield {\n      path,\n      previousCharacter,\n      nextCharacter,\n      file: file.fileName,\n      line,\n    };\n  }\n}\n\n/**\n * Extracts translation keys from methods such as `$t` and `$tc`.\n *\n * - **regexp pattern**: (?:[$\\s.:\"'`+\\(\\[\\{]t[cm]?)\\(\n *\n *   **description**: Matches the sequence t(, tc( or tm(, optionally with either “$”, SPACE, “.”, “:”, “\"”, “'”,\n *   “`”, \"+\", \"(\", \"[\" or \"{\" in front of it.\n *\n * - **regexp pattern**: ([\"'`])\n *\n *   **description**: 1. capturing group. Matches either “\"”, “'”, or “`”.\n *\n * - **regexp pattern**: ((?:[^\\\\]|\\\\.)*?)\n *\n *   **description**: 2. capturing group. Matches anything except a backslash\n *   *or* matches any backslash followed by any character (e.g. “\\\"”, “\\`”, “\\t”, etc.)\n *\n * - **regexp pattern**: \\1\n *\n *   **description**: matches whatever was matched by capturing group 1 (e.g. the starting string character)\n *\n * @param file a file object\n * @returns a list of translation keys found in `file`.\n */\n function extractMethodMatches (file: SimpleFile): I18NItemWithBounding[] {\n  const methodRegExp = /(?:[$\\s.:\"'`+\\(\\[\\{]t[cm]?)\\(\\s*?([\"'`])((?:[^\\\\]|\\\\.)*?)\\1/g;\n  return [ ...getMatches(file, methodRegExp, 2) ];\n}\n\nfunction extractComponentMatches (file: SimpleFile): I18NItemWithBounding[] {\n  const componentRegExp = /(?:(?:<|h\\()(?:i18n|Translation))(?:.|\\n)*?(?:\\s(?:(?:key)?)path(?:=|: )(\"|'))((?:[^\\\\]|\\\\.)*?)\\1/gi;\n  return [ ...getMatches(file, componentRegExp, 2) ];\n}\n\nfunction extractDirectiveMatches (file: SimpleFile): I18NItemWithBounding[] {\n  const directiveRegExp = /\\bv-t(?:\\.[\\w-]+)?=\"'((?:[^\\\\]|\\\\.)*?)'\"/g;\n  return [ ...getMatches(file, directiveRegExp) ];\n}\n\nexport function extractI18NItemsFromVueFiles (sourceFiles: SimpleFile[]): I18NItemWithBounding[] {\n  return sourceFiles.reduce((accumulator, file) => {\n    const methodMatches = extractMethodMatches(file);\n    const componentMatches = extractComponentMatches(file);\n    const directiveMatches = extractDirectiveMatches(file);\n    return [\n      ...accumulator,\n      ...methodMatches,\n      ...componentMatches,\n      ...directiveMatches,\n    ];\n  }, [] as I18NItemWithBounding[]);\n}\n\n// This is a convenience function for users implementing in their own projects, and isn't used internally\nexport function parseVueFiles (vueFiles: string): I18NItemWithBounding[] {\n  return extractI18NItemsFromVueFiles(readVueFiles(vueFiles));\n}\n","import path from 'path';\nimport fs from 'fs';\nimport glob from 'glob';\nimport Dot from 'dot-object';\nimport yaml from 'js-yaml';\nimport isValidGlob from 'is-valid-glob';\nimport { SimpleFile, I18NLanguage, I18NItem } from '../types';\n\nexport function readLanguageFiles (src: string): SimpleFile[] {\n  // Replace backslash path segments to make the path work with the glob package.\n  // https://github.com/Spittal/vue-i18n-extract/issues/159\n  const normalizedSrc = src.replace(/\\\\/g, '/');\n  if (!isValidGlob(normalizedSrc)) {\n    throw new Error(`languageFiles isn't a valid glob pattern.`);\n  }\n\n  const targetFiles = glob.sync(normalizedSrc);\n\n  if (targetFiles.length === 0) {\n    throw new Error('languageFiles glob has no files.');\n  }\n\n  return targetFiles.map(f => {\n    const langPath = path.resolve(process.cwd(), f);\n\n    const extension = langPath.substring(langPath.lastIndexOf('.')).toLowerCase();\n    const isJSON = extension === '.json';\n    const isYAML = extension === '.yaml' || extension === '.yml';\n\n    let langObj;\n    if (isJSON) {\n      langObj = JSON.parse(fs.readFileSync(langPath, 'utf8'));\n    } else if (isYAML) {\n      langObj = yaml.load(fs.readFileSync(langPath, 'utf8'));\n    } else {\n      langObj = eval(fs.readFileSync(langPath, 'utf8'));\n    }\n\n    const fileName = f.replace(process.cwd(), '.');\n\n    return { path: f, fileName, content: JSON.stringify(langObj) };\n  });\n}\n\nexport function extractI18NLanguageFromLanguageFiles (languageFiles: SimpleFile[], dot: DotObject.Dot = Dot): I18NLanguage {\n  return languageFiles.reduce((accumulator, file) => {\n    const language = file.fileName.substring(file.fileName.lastIndexOf('/') + 1, file.fileName.lastIndexOf('.'));\n\n    if (!accumulator[language]) {\n      accumulator[language] = [];\n    }\n\n    const flattenedObject = dot.dot(JSON.parse(file.content));\n    Object.keys(flattenedObject).forEach((key) => {\n      accumulator[language].push({\n        path: key,\n        file: file.fileName,\n      });\n    });\n\n    return accumulator;\n  }, {});\n}\n\nexport function writeMissingToLanguageFiles (parsedLanguageFiles: SimpleFile[], missingKeys: I18NItem[], dot: DotObject.Dot = Dot, noEmptyTranslation = '', missingTranslationString = '', jsonIndentation = 2): void {\n  parsedLanguageFiles.forEach(languageFile => {\n    const languageFileContent = JSON.parse(languageFile.content);\n\n    missingKeys.forEach(item => {\n      if (item.language && languageFile.fileName.includes(item.language) || !item.language) {\n        const addDefaultTranslation = (noEmptyTranslation) && ((noEmptyTranslation === '*') || (noEmptyTranslation === item.language));\n        dot.str(item.path, addDefaultTranslation ? item.path : missingTranslationString === 'null' ? null : missingTranslationString, languageFileContent);\n      }\n    });\n\n    writeLanguageFile(languageFile, languageFileContent, jsonIndentation);\n  });\n}\n\nexport function removeUnusedFromLanguageFiles (parsedLanguageFiles: SimpleFile[], unusedKeys: I18NItem[], dot: DotObject.Dot = Dot, jsonIndentation = 2): void {\n  parsedLanguageFiles.forEach(languageFile => {\n    const languageFileContent = JSON.parse(languageFile.content);\n\n    unusedKeys.forEach(item => {\n      if (item.language && languageFile.fileName.includes(item.language)) {\n        dot.delete(item.path, languageFileContent);\n      }\n    });\n\n    writeLanguageFile(languageFile, languageFileContent);\n  });\n}\n\nfunction writeLanguageFile (languageFile: SimpleFile, newLanguageFileContent: unknown, jsonIndentation = 2) {\n  const fileExtension = languageFile.fileName.substring(languageFile.fileName.lastIndexOf('.') + 1);\n    const filePath = languageFile.path;\n    const stringifiedContent = JSON.stringify(newLanguageFileContent, null, jsonIndentation);\n\n    if (fileExtension === 'json') {\n      fs.writeFileSync(filePath, stringifiedContent);\n    } else if (fileExtension === 'js') {\n      const jsFile = `module.exports = ${stringifiedContent}; \\n`;\n      fs.writeFileSync(filePath, jsFile);\n    } else if (fileExtension === 'yaml' || fileExtension === 'yml') {\n      const yamlFile = yaml.dump(newLanguageFileContent);\n      fs.writeFileSync(filePath, yamlFile);\n    } else {\n      throw new Error(`Language filetype of ${fileExtension} not supported.`)\n    }\n}\n\n// This is a convenience function for users implementing in their own projects, and isn't used internally\nexport function parselanguageFiles (languageFiles: string, dot: DotObject.Dot = Dot): I18NLanguage {\n  return extractI18NLanguageFromLanguageFiles(readLanguageFiles(languageFiles), dot);\n}\n","import fs from 'fs';\nimport { DetectionType, I18NItem, I18NItemWithBounding, I18NLanguage, I18NReport } from '../types';\n\nfunction stripBounding (item: I18NItemWithBounding): I18NItem {\n  return {\n    path: item.path,\n    file: item.file,\n    line: item.line,\n  }\n}\n\nfunction mightBeDynamic (item: I18NItemWithBounding): boolean {\n  return item.path.includes('${') && !!item.previousCharacter.match(/`/g) && !!item.nextCharacter.match(/`/g);\n}\n\n// Looping through the arays multiple times might not be the most effecient, but it's the easiest to read and debug. Which at this scale is an accepted trade-off.\nexport function extractI18NReport (vueItems: I18NItemWithBounding[], languageFiles: I18NLanguage, detect: DetectionType[]): I18NReport {\n  const missingKeys: I18NItem[] = [];\n  const unusedKeys: I18NItem[] = [];\n  const maybeDynamicKeys: I18NItem[] = [];\n\n  if (detect.includes(DetectionType.Dynamic)) {\n   maybeDynamicKeys. push( ...vueItems\n    .filter(vueItem => mightBeDynamic(vueItem))\n    .map(vueItem => stripBounding(vueItem)));\n   }\n\n  Object.keys(languageFiles).forEach(language => {\n    const languageItems = languageFiles[language];\n\n    if (detect.includes(DetectionType.Missing)) {\n    const missingKeysInLanguage = vueItems\n      .filter(vueItem => !mightBeDynamic(vueItem))\n      .filter(vueItem => !languageItems.some(languageItem => vueItem.path === languageItem.path))\n      .map(vueItem => ({ ...stripBounding(vueItem), language }));\n\n    missingKeys.push(...missingKeysInLanguage);\n    }\n\n    if (detect.includes(DetectionType.Unused)) {\n    const unusedKeysInLanguage = languageItems\n      .filter(languageItem => !vueItems.some(vueItem => languageItem.path === vueItem.path || languageItem.path.startsWith(vueItem.path + '.')))\n      .map(languageItem => ({ ...languageItem, language }));\n\n    unusedKeys.push(...unusedKeysInLanguage);\n    }\n  });\n\n  return {\n    missingKeys,\n    unusedKeys,\n    maybeDynamicKeys,\n  };\n}\n\nexport async function writeReportToFile (report: I18NReport, writePath: string): Promise<NodeJS.ErrnoException | void> {\n  const reportString = JSON.stringify(report);\n  return new Promise((resolve, reject) => {\n    fs.writeFile(\n      writePath,\n      reportString,\n      (err) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve();\n      },\n    );\n  });\n}\n\n","import path from 'path';\nimport { ReportOptions, I18NReport, DetectionType } from '../types';\nimport { readVueFiles, extractI18NItemsFromVueFiles } from './vue-files';\nimport { readLanguageFiles, extractI18NLanguageFromLanguageFiles, removeUnusedFromLanguageFiles, writeMissingToLanguageFiles } from './language-files';\nimport { extractI18NReport,  writeReportToFile } from './report';\nimport Dot from 'dot-object';\n\nexport async function createI18NReport (options: ReportOptions): Promise<I18NReport> {\n  const {\n    vueFiles: vueFilesGlob,\n    languageFiles: languageFilesGlob,\n    output,\n    add,\n    remove,\n    exclude = [],\n    ci,\n    separator,\n    noEmptyTranslation = '',\n    missingTranslationString = '',\n    jsonIndentation = 2,\n    detect = [DetectionType.Missing, DetectionType.Unused, DetectionType.Dynamic]\n  } = options;\n\n  if (!vueFilesGlob) throw new Error('Required configuration vueFiles is missing.');\n  if (!languageFilesGlob) throw new Error('Required configuration languageFiles is missing.');\n\n  let issuesToDetect = Array.isArray(detect) ? detect : [detect];\n  const invalidDetectOptions = issuesToDetect.filter(item => !Object.values(DetectionType).includes(item));\n  if (invalidDetectOptions.length) {\n    throw new Error(`Invalid 'detect' value(s): ${invalidDetectOptions}`);\n  }\n\n  const dot = typeof separator === 'string' ? new Dot(separator) : Dot;\n  const vueFiles = readVueFiles(path.resolve(process.cwd(), vueFilesGlob));\n  const languageFiles = readLanguageFiles(path.resolve(process.cwd(), languageFilesGlob));\n\n  const I18NItems = extractI18NItemsFromVueFiles(vueFiles);\n  const I18NLanguage = extractI18NLanguageFromLanguageFiles(languageFiles, dot);\n\n  const report = extractI18NReport(I18NItems, I18NLanguage, issuesToDetect);\n\n  report.unusedKeys = report.unusedKeys.filter(key =>\n      !exclude.filter(excluded => key.path.startsWith(excluded)).length)\n\n  if (report.missingKeys.length) console.info('\\nMissing Keys'), console.table(report.missingKeys);\n  if (report.unusedKeys.length) console.info('\\nUnused Keys'), console.table(report.unusedKeys);\n  if (report.maybeDynamicKeys.length) console.warn('\\nSuspected Dynamic Keys Found\\nvue-i18n-extract does not compile Vue templates and therefore can not infer the correct key for the following keys.'), console.table(report.maybeDynamicKeys);\n\n  if (output) {\n    await writeReportToFile(report, path.resolve(process.cwd(), output));\n    console.info(`\\nThe report has been has been saved to ${output}`);\n  }\n\n  if (remove && report.unusedKeys.length) {\n    removeUnusedFromLanguageFiles(languageFiles, report.unusedKeys, dot);\n    console.info('\\nThe unused keys have been removed from your language files.');\n  }\n\n  if (add && report.missingKeys.length) {\n    writeMissingToLanguageFiles(languageFiles, report.missingKeys, dot, noEmptyTranslation, missingTranslationString, jsonIndentation);\n    console.info('\\nThe missing keys have been added to your language files.');\n  }\n\n  if (ci && report.missingKeys.length) {\n    throw new Error(`${report.missingKeys.length} missing keys found.`);\n  }\n\n  if (ci && report.unusedKeys.length) {\n    throw new Error(`${report.unusedKeys.length} unused keys found.`);\n  }\n\n  return report;\n}\n\nexport * from './vue-files';\nexport * from './language-files';\nexport * from './report';\n","export * from './config-file';\nexport * from './create-report';\nexport * from './types';\n\nprocess.on('uncaughtException', (err) => {\n  console.error('[vue-i18n-extract]', err);\n  process.exit(1);\n});\n\nprocess.on('unhandledRejection', (err) => {\n  console.error('[vue-i18n-extract]', err);\n  process.exit(1);\n});\n"],"names":["vueFiles","languageFiles","exclude","output","add","remove","ci","separator","noEmptyTranslation","missingTranslationString","initCommand","fs","writeFileSync","path","process","cwd","JSON","stringify","defaultConfig","resolveConfig","argvOptions","parse","argv","run","options","pathToConfigFile","resolve","configOptions","require","console","info","_extends","readVueFiles","src","normalizedSrc","replace","isValidGlob","Error","targetFiles","glob","sync","length","map","fileName","f","content","readFileSync","getMatches","file","regExp","captureGroup","match","exec","indexOf","charAt","pathAtIndex","line","substring","index","extractMethodMatches","methodRegExp","extractComponentMatches","componentRegExp","extractDirectiveMatches","directiveRegExp","extractI18NItemsFromVueFiles","sourceFiles","reduce","accumulator","methodMatches","componentMatches","directiveMatches","readLanguageFiles","langPath","extension","lastIndexOf","toLowerCase","isJSON","isYAML","langObj","load","eval","extractI18NLanguageFromLanguageFiles","dot","Dot","language","flattenedObject","Object","keys","forEach","key","push","writeMissingToLanguageFiles","parsedLanguageFiles","missingKeys","jsonIndentation","languageFile","languageFileContent","item","includes","addDefaultTranslation","str","writeLanguageFile","removeUnusedFromLanguageFiles","unusedKeys","delete","newLanguageFileContent","fileExtension","stringifiedContent","stripBounding","mightBeDynamic","previousCharacter","nextCharacter","extractI18NReport","vueItems","detect","DetectionType","Dynamic","filter","vueItem","languageItems","Missing","missingKeysInLanguage","some","languageItem","Unused","unusedKeysInLanguage","startsWith","maybeDynamicKeys","writeReportToFile","report","writePath","createI18NReport","vueFilesGlob","languageFilesGlob","issuesToDetect","Array","isArray","invalidDetectOptions","values","I18NItems","I18NLanguage","excluded","table","warn","on","error","err","exit"],"mappings":"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"}